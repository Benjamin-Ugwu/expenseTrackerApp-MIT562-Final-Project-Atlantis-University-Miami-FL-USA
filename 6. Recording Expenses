"""
    Program: expenseTracker.py
    Author: Benjamin O Ugwu
    Date: 12/10/2019

    A program to help a user track his/her expenses.
    For example, a user will be able to set a budget for any desired expense type, record any expense
    made and be able to see the remaining amount to be spent on that budget.

    Input:

    Processing:

    Output:
        

"""
# Show the user the purpose of the program

# Import any modules needed by program
from breezypythongui import EasyFrame
from tkinter import PhotoImage
import os
import datetime

from tkinter import END, NORMAL, DISABLED


# Initialize constants and variables

# Input data into variables

# Process the inputs to produce the results

class expenseTracker(EasyFrame): #expense tracker extends EasyFrame(by lambert), EasyFrame extends tkinter which means, they both can run any method found in tkinter

    def __init__(self): #runs expenseTracker automatically, self refers to our expensetracker app window
        EasyFrame.__init__(self,width=1200,height=700,title="ExpenseTracker")#runs EasyFrame, the current frame we are working on-a grandchild of tkinter

        self["background"]="#d6d6d6"

        #self.setResizable="False"
        
        #add logo label and image       
        logoLabel=self.addLabel(text="",row=0, column=1,background="#d6d6d6",sticky="NE")
        self.image=PhotoImage(file="logo.gif")
        logoLabel["image"]=self.image

        #add date and time label
        dt=datetime.datetime.now()
        dateTimeLabel=self.addLabel(text="Date: "+dt.strftime("%x"),row=0,column=0,background="#d6d6d6",sticky="W")      
        
        
        #add app Name label  and image     
        appNameLabel=self.addLabel(text="",row=1,column=0,background="#d6d6d6",sticky="N",columnspan=2)
        self.imageET=PhotoImage(file="ET.gif")
        appNameLabel["image"]=self.imageET

        #add menu button        
        self.addButton(text="--Create New Expenses Category",row=2, column=0,state="normal",command=self.newCategory).grid(sticky="N",columnspan=2)
        self.addButton(text="--Record Expenses",row=3, column=0,state="normal",command=self.recordExpenses).grid(sticky="EW",padx=510,columnspan=2)
        self.addButton(text="--Track Expenses",row=4, column=0,state="normal",command=self.trackExpenses).grid(sticky="S",columnspan=2)  
        
        #add date and time label
        #dt=datetime.datetime.now()
        #dateTimeLabel=self.addLabel(text="Date: "+dt.strftime("%x"),row=3,column=0,background="#d6d6d6",sticky="S")
        
        #add copyright label and text        
        copyrighLabel=self.addLabel(text="Â© All Rights Reserved 2019\nBenjamin O Ugwu\nAtlantis University Miami Florida USA",background="#d6d6d6",row=5, column=0,sticky="NS",columnspan=2) 
      
            
    def newCategory(self):#close the main window and open the newCategory window
        self.destroy()
        newCategory()  
        
        #newCategory=self.prompterBox(title="New Category",promptString="Enter the Category Name")
        #self.messageBox(title="New Category",message="Enter the Category Name")

        
    def recordExpenses(self):#close the main window and open the recordExpenses window        
        self.destroy()
        recordExpenses()


    def trackExpenses(self):#close the main window and open the trackExpenses window
        self.destroy()
        trackExpenses() 
        



class newCategory(EasyFrame): #expense tracker extends EasyFrame(by lambert), EasyFrame extends tkinter which means, they both can run any method found in tkinter

    def __init__(self): #runs expenseTracker automatically, self refers to our expensetracker app window
        EasyFrame.__init__(self,width=1200,height=700,title="Adding a New Category & Budget")#runs EasyFrame, the current frame we are working on-a grandchild of tkinter

        self["background"]="#d6d6d6"

        #add logo label and image       
        logoLabel=self.addLabel(text="",row=0, column=0,background="#d6d6d6",sticky="NE")
        self.image=PhotoImage(file="logo.gif")
        logoLabel["image"]=self.image

        #receive name and budget
        newCategoryName=self.addLabel(text="Enter Name of a New Category: ",row=1, column=0,background="#d6d6d6",sticky="N")
        self.name=self.addTextField(text="noNameYet",row=1,column=0)
        self.name.grid(sticky="EW",padx=500)
        global NAME
        
        
        newCategoryBudget=self.addLabel(text="Enter Budget for this Category: ",row=2, column=0,background="#d6d6d6",sticky="N")
        self.budget=self.addTextField(text="0.0",row=2,column=0)
        self.budget.grid(sticky="EW",padx=500)
        global BUDGET
        

        
        self.addButton(text="Submit",row=3, column=0,command=self.submitSuccesful)

    def submitSuccesful(self):
        
        NAME=self.name.getText()
        BUDGET=self.budget.getText()
        
        #find the last serial number in file
        f=open("categoryBudget.txt","r")
        contents=f.read()        
        if contents=="":
            sn=1
        else:
            contentsSplit=contents.split()#return all content in a list
            lastSN=contentsSplit[-4]#take the last serial number, position -4
            sn=int(lastSN)+1#add 1 to the last serial number to get the next one
      
        #write name and budget to file        
        DATE=str(datetime.datetime.now().strftime("%x"))
        SN=str(sn)
        
        f=open("categoryBudget.txt","a")
        f.write("\n"+SN+"\t"+NAME+"\t"+BUDGET+"\t"+DATE)
        f.close()

        #show a succesful record made message
        self.messageBox(title="Submitted",message="Your New Category & Budget were added successfully!")
        self.destroy()
        expenseTracker()



class recordExpenses(EasyFrame): #expense tracker extends EasyFrame(by lambert), EasyFrame extends tkinter which means, they both can run any method found in tkinter
    
    def __init__(self): #runs expenseTracker automatically, self refers to our expensetracker app window
        EasyFrame.__init__(self,width=1200,height=700,title="Recording Expenses")#runs EasyFrame, the current frame we are working on-a grandchild of tkinter

        self["background"]="#d6d6d6"

        #add logo label and image       
        logoLabel=self.addLabel(text="",row=0, column=0,background="#d6d6d6",sticky="NE")
        self.image=PhotoImage(file="logo.gif")
        logoLabel["image"]=self.image

        recordExpensesLabel=self.addLabel(text="Select Expense Category: ",row=1, column=0,background="#d6d6d6",sticky="N")
        #ADD ENTERED CATEGORY LIST HERE
        
        #self.addListbox(row=2,column=0,rowspan = 1,listItemSelected = self.listItemSelected).grid(padx=500)
        self.listBox = self.addListbox(row = 2, column = 0)#add an empty list box
        self.listBox.grid(padx=500)#position the list box with padx=500

        #find the recorded categories from file       
        global noCategoryFound
        noCategoryFound=False
        f=open("categoryBudget.txt","r")
        contents=f.read()        
        if contents=="":#if the file is empty
            noCategoryFound=True
            self.listBox.insert(END, "- - -")
            
        else:
            f.close()
            f=open("categoryBudget.txt","r")
            while True:
                contents=f.readline()
                if contents=="":
                    break
                else:
                    contentsCategory=contents.split()[1]#get the category                    

                    #add categories into the list box from already recorded categories
                    self.listBox.insert(END,contentsCategory)#add the category to GUI list box
                    self.listBox.setSelectedIndex(0)#first item will always be selected by default until you select another one
        
              
        #spent amount label and text field
        recordExpensesLabel=self.addLabel(text="Enter Amount Spent: ",row=3, column=0,background="#d6d6d6",sticky="S")
        self.spentAmount=self.addTextField(text="0.0",row=4,column=0)
        self.spentAmount.grid(sticky="N",padx=500)
        global AMOUNT

        #comment label and text area field
        recordExpensesLabel=self.addLabel(text="Comment: ",row=5, column=0,background="#d6d6d6",sticky="S")
        self.comment=self.addTextArea(text="...",row=6,column=0,width=10,height=10)
        self.comment.grid(padx=400)
        global COMMENT
        
        
        
        self.addButton(text="Submit",row=7, column=0,command=self.submitSuccesful)  
    
    

    def submitSuccesful(self):
        f=open("categoryBudget.txt","r")
        contents=f.read()        
        if noCategoryFound==True:#if no category found
            self.messageBox(title="Error!",message="Add an Expense Category First!")        
            self.destroy()
            expenseTracker()
            
        else:

            AMOUNT=self.spentAmount.getText()
            COMMENT=self.comment.getText()


            #find the last serial number in file
            f=open("individualExpense.txt","r")
            contents=f.read()        
            if contents=="":
                sn=1
            else:
                f.close()# close the file and read it again from beginning
                f=open("individualExpense.txt","r")
                contents=f.read()
                print(contents)
                
                contentsSplit=contents.split()#return all items in a list
                #print(contentsSplit)
                lastSN=contentsSplit[-5]#take the last serial number, -5 position 
                #print(contentsLast)               
                sn=int(lastSN)+1#add 1 to the last serial number to get the next one
               
            #write name and budget to file        
            DATE=str(datetime.datetime.now().strftime("%x"))
            SN=str(sn)            
            CATEGORY=self.listBox.getSelectedItem()#get the selected category from the list box
            
            f=open("individualExpense.txt","a")
            f.write("\n"+SN+"\t"+CATEGORY+"\t"+AMOUNT+"\t"+DATE+"\t"+COMMENT)
            f.close()                                
        
            self.messageBox(title="Submitted",message="Your Expense was added successfully!")
            self.destroy()
            expenseTracker()
        



class trackExpenses(EasyFrame): #expense tracker extends EasyFrame(by lambert), EasyFrame extends tkinter which means, they both can run any method found in tkinter

    def __init__(self): #runs expenseTracker automatically, self refers to our expensetracker app window
        EasyFrame.__init__(self,title="Tracking Your Expenses")#runs EasyFrame, the current frame we are working on-a grandchild of tkinter

        self["background"]="#d6d6d6"

        #add logo label and image       
        logoLabel=self.addLabel(text="",row=0, column=0,background="#d6d6d6",sticky="NE")
        self.image=PhotoImage(file="logo.gif")
        logoLabel["image"]=self.image

        #add app Name label  and image     
        appNameLabel=self.addLabel(text="",row=0,column=0,background="#d6d6d6",sticky="S")
        self.imageET=PhotoImage(file="TE.gif")
        appNameLabel["image"]=self.imageET


        #self.addLabel(text="Below are the details of your Expenses: ",row=0, column=0,background="#d6d6d6",sticky="EW")
        #ROW 2 FOR DETAILS
        #self.addLabel(text="S/N\tCategory\tBudget\tDate Added\tAmount Spent\tAmount Remaining",row=1,column=0).grid(sticky="EW")
        #self.addLabel(text="S/N\tCategory\tExpenses\tDate Expended\tComment",row=3,column=0).grid(sticky="EW")

        #heading1="%9s%14s%12s%16s%18s%22s\n"%("S/N","Category","Budget","Date Added","Amount Spent","Amount Remaining")
        heading1="%-6s%-22s%-22s%-22s%-22s%-22s\n\n"%("S/N","Category","Budget($)","Date Added","Amount Spent($)","Amount Remaining($)")
        f=open("expenseTracker.txt","r")

        record=""        
        while True:
            expenseRecord=f.readline()
            if expenseRecord=="":
                break
            else:
                expenseRecordList=expenseRecord.split()
                #print( expenseRecordList)
                #for eachEntry in range(len(expenseRecordList)):
                record+="%-6s"%expenseRecordList[0]       
                record+="%-22s"%expenseRecordList[1]
                record+="%-22s"%expenseRecordList[2]
                record+="%-22s"%expenseRecordList[3]
                record+="%-22s"%expenseRecordList[4]
                record+="%-22s"%expenseRecordList[5]
                record+="\n"
        
        heading2="%-6s%-22s%-22s%-22s%-50s\n\n"%("S/N","Category","Expense Amount($)","Date Expended","Comment")
        f=open("individualExpense.txt","r")

        recordDetail=""
        while True:
            expenseDetail=f.readline()
            if expenseDetail=="":
                break
            else:
                expenseDetailList=expenseDetail.split()
                #print( expenseRecordList)
                #for eachEntry in range(len(expenseRecordList)):
                recordDetail+="%-6s"%expenseDetailList[0]       
                recordDetail+="%-22s"%expenseDetailList[1]
                recordDetail+="%-22s"%expenseDetailList[2]
                recordDetail+="%-22s"%expenseDetailList[3]
                recordDetail+="%-50s"%expenseDetailList[4]               
                recordDetail+="\n"
        
        self.outputArea=self.addTextArea(text="",row=2,column=0,width=30,height=20)
        self.outputArea.grid(padx=100)
        self.outputArea["state"]="normal"
        print(heading1)
        self.outputArea.setText("SUMMARY OF EXPENSES:\n\n"+heading1+record+"\n\n\nINDIVIDUAL EXPENSES:\n\n"+heading2+recordDetail)
        #self.outputArea.setText("\n\n\n"+heading2+recordDetail)
        self.outputArea["state"]="disabled"#makes the output uneditable

       
        self.addButton(text="Home",row=5, column=0,command=self.goHome)

    def goHome(self):        
        self.destroy()
        expenseTracker()

       

            
def main():
    expenseTracker().mainloop()

if __name__=="__main__":
    main()







# Display the results

# Finish or continue

"""
Further work:
A calculator
A Reminder
"""
